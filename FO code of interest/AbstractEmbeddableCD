package sg.ica.eac.common.entity.embeddable;

import java.io.Serializable;

import javax.persistence.Cacheable;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.MappedSuperclass;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;

import sg.ica.eac.common.resource.Constants;
import sg.ica.eac.common.util.CodeUtil;
import sg.ica.eac.common.util.CommonUtil;
import sg.ica.eac.common.view.CodeMasterBaseView;
import sg.ica.eac.common.view.CodeView;

@MappedSuperclass
@Cacheable
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public abstract class AbstractEmbeddableCD<C extends CodeMasterBaseView> implements Serializable {
	private static final long serialVersionUID = 2705445576449355393L;
	private String cd;
	@Transient
	private String cdDescr;
	private C codeView;

	public String getCd() {
		return this.cd;
	}

	public void setCd(String cd) {
		this.cd = cd;
	}

	@Transient
	public abstract String getCdType();

	@Transient
	public String getCdDescr() {
		if (StringUtils.isNotBlank(this.cdDescr)) {
			return this.cdDescr;
		} else if (this.codeView != null && StringUtils.isNotBlank(this.codeView.getCdDescr())) {
			return this.codeView.getCdDescr();
		} else {
			// attempt to retrieve from database or cache in case hibernate not
			// honoring the join
			if (this.codeView == null) {
				this.cdDescr = CodeUtil.getDescriptionByTypeAndCode(this.getCdType(), this.cd);
			}
			if (StringUtils.isNotBlank(this.cdDescr)) {
				return this.cdDescr;
			}
			// finally return unrecognized or empty
			return CodeUtil.setupUnknownDesc(this.cd);
		}
	}

	@Transient
	public void setCdDescr(String cdDescr) {
		this.cdDescr = cdDescr;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@NotFound(action = NotFoundAction.IGNORE)
	public C getCodeView() {
		return this.codeView;
	}

	public void setCodeView(C codeView) {
		this.codeView = codeView;
	}

	public void setCodeDescr(CodeView view) {
		if (view != null) {
			this.cdDescr = view.getCdDescr();
		}
	}

	@Transient
	public boolean isEqual(AbstractEmbeddableCD<?> other) {
		boolean result = true;
		
		if (this == other) {
			result = true;
		}
		else if (other == null || this.getClass() != other.getClass() || !CommonUtil.areEqual(this.cd, other.cd) || !CommonUtil.areEqual(this.getCdType(), other.getCdType())) {
			result = false;
		} else {
			result = true;
		}
		
		return result;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((this.cd == null) ? 0 : this.cd.hashCode());
		result = prime * result + ((this.getCdType() == null) ? 0 : this.getCdType().hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		return obj instanceof AbstractEmbeddableCD<?> && this.isEqual((AbstractEmbeddableCD<?>) obj);
	}

	@Override
	public String toString() {
		return "AbstractEmbeddableCD " + Constants.SQUARE_BRACKET_LEFT + "cd=" + this.cd + Constants.SQUARE_BRACKET_RIGHT;
	}
}