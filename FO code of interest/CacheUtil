package sg.ica.eac.common.util;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.time.Duration;
import java.util.List;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.ehcache.Cache;
import org.ehcache.CacheManager;
import org.ehcache.Status;
import org.ehcache.config.Configuration;
import org.ehcache.config.builders.CacheConfigurationBuilder;
import org.ehcache.config.builders.CacheManagerBuilder;
import org.ehcache.config.builders.ExpiryPolicyBuilder;
import org.ehcache.config.builders.ResourcePoolsBuilder;
import org.ehcache.config.units.MemoryUnit;
import org.ehcache.xml.XmlConfiguration;

import sg.ica.eac.common.bean.BeanFactory;
import sg.ica.eac.common.resource.Constants;
import sg.ica.eac.common.service.ConfigSystemService;
import sg.ica.eac.common.view.ConfigSystemView;

public final class CacheUtil {

	private static final Logger logger = LogManager.getLogger(CacheUtil.class);

	private static CacheUtil instance;
	private static CacheManager cacheManager;
	private static final String CACHE_CONFIG = "/ehcache.xml";
	private static final String CACHE_CONTEXT_PATH = "cache/";
	private static final int TTL_CONFIG = 30;
	public static final String DEFAULT_CACHE = "defaultCache";
	public static final String PERM_CACHE = "permCache";
	public static final String CODE_CACHE = "codeCache";
	public static final String LABEL_CACHE = "labelCache";
	public static final String STATIC_QUESTION_CACHE = "staticQuestionCache";
	public static final String DYNAMIC_QUESTION_CACHE = "dynamicQuestionCache";
	public static final String ACCESS_CONTROL_CACHE = "accessControlCache";
	public static final String CONFIG_SYSTEM_CACHE = "configSystemCache";
	public static final String CONFIG_ADDRESS_CACHE = "configAddressCache";
	public static final String CONFIG_CODE_CACHE = "configCodeCache";
	public static final String CONFIG_TOKEN_CACHE = "configTokenCache";
	private static long heapMemorySizeKB = 2000;
	
	
	public static final String FIND_BY_QUES_FROM_CACHE = "(findByQuestionFromCache)";
	public static final String FIND_BY_CD_TYP_FROM_CACHE = "(findByCodeTypeFromCache)";
	public static final String CD_TYP = "codeType";
	public static final String ONLY_ACTIVE = "onlyActive";
	
	private static final String ADD_TO_CACHE = "ADD TO ({} - {})";
	private static final String ADD_TO_CACHE_IS_NULL = "ADD TO ({} - {}) - cache is null";
	private static final String ADD_TO_OBJ_IS_NOT_SERIAL = "ADD TO ({} - {}) - object is not serializable";
	private static final String ADD_TO_EXCEP = "ADD TO ({} - {}) - {}";
	
	private static final String GET_FROM_CACHE = "GET FROM ({} - {})";
	private static final String GET_FROM_CACHE_IS_NULL = "GET FROM ({} - {}) - cache is null";
	private static final String GET_FROM_EXCEP = "GET FROM ({} - {}) - {}";
	
	private static final String EXIST_IN_CACHE = "EXIST IN ({} - {})";
	private static final String EXIST_IN_EXCEP = "EXIST IN ({} - {}) - {}";
	
	private static final String CLEAR_IN_CACHE = "CLEAR ({})";
	private static final String CLEAR_IN_CACHE_IS_NULL = "CLEAR ({}) - cache is null";
	private static final String CLEAR_IN_EXCEP = "CLEAR ({}) - {}";
	
	private CacheUtil () {
		
	}

	public static CacheUtil getInstance() {
		if (instance == null) {
			instance = new CacheUtil();
			try {
				URL url = instance.getClass().getResource(CACHE_CONFIG);
				Configuration configuration = new XmlConfiguration(url);
				cacheManager = CacheManagerBuilder.newCacheManager(configuration);
				cacheManager.init();
			} catch (Exception e) {
				logger.error(ExceptionUtils.getRootCauseMessage(e));
			}
		}

		return instance;
	}

	private static Cache<String, Serializable> getCache(String cacheName) {
		Cache<String, Serializable> cache = null;

		if (cacheManager != null && Status.AVAILABLE.equals(cacheManager.getStatus())) {
			cache = cacheManager.getCache(cacheName, String.class, Serializable.class);
			if (cache == null) {
				logger.info("CREATE CACHE({}) WITH HEAP MEMORY SIZE: {} KB", cacheName, heapMemorySizeKB);
				cache = cacheManager.createCache(cacheName, CacheConfigurationBuilder.newCacheConfigurationBuilder
				(String.class, Serializable.class, ResourcePoolsBuilder.newResourcePoolsBuilder().heap(heapMemorySizeKB,MemoryUnit.KB).build())
				.withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofMinutes(TTL_CONFIG))));
			}
		}
		return cache;
	}
	
	public void addToCache(String cacheName, String key, Object object) {
		try {
			if (object != null) {
				if (object instanceof Serializable) {
					logger.trace(ADD_TO_CACHE, cacheName, key);
					Cache<String, Serializable> cache = getCache(cacheName);
					if (cache != null) {
						cache.put(key, (Serializable) object);
					} else {
						logger.warn(ADD_TO_CACHE_IS_NULL, cacheName, key);
					}
				} else {
					logger.warn(ADD_TO_OBJ_IS_NOT_SERIAL, cacheName, key);
				}
			}
		} catch (Exception e) {
			logger.warn(ADD_TO_EXCEP, cacheName, key, ExceptionUtils.getRootCauseMessage(e));
		}
	}

	public Object getFromCache(String cacheName, String key) {
		try {
			logger.trace(GET_FROM_CACHE, cacheName, key);
			Cache<String, Serializable> cache = getCache(cacheName);
			if (cache != null) {
				return cache.get(key);
			} else {
				logger.warn(GET_FROM_CACHE_IS_NULL, cacheName, key);
			}
		} catch (Exception e) {
			logger.warn(GET_FROM_EXCEP, cacheName, key, ExceptionUtils.getRootCauseMessage(e));
		}
		return null;
	}

	public boolean existInCache(String cacheName, String key) {
		try {
			Cache<String, Serializable> cache = getCache(cacheName);
			if (cache != null && cache.containsKey(key)) {
				logger.trace(EXIST_IN_CACHE, cacheName, key);
				return true;
			}
		} catch (Exception e) {
			logger.warn(EXIST_IN_EXCEP, cacheName, key, ExceptionUtils.getRootCauseMessage(e));
		}
		return false;
	}

	public void clearCache(String cacheName) {
		try {
			logger.trace(CLEAR_IN_CACHE, cacheName);
			Cache<String, Serializable> cache = getCache(cacheName);
			if (cache != null) {
				cache.clear();
			} else {
				logger.warn(CLEAR_IN_CACHE_IS_NULL, cacheName);
			}
		} catch (Exception e) {
			logger.warn(CLEAR_IN_EXCEP, ExceptionUtils.getRootCauseMessage(e));
		}
	}

	public void resetCacheManager() {
		try {
			logger.info("RESET CACHEMANAGER");
			cacheManager.close();
			cacheManager.init();
		} catch (Exception e) {
			logger.warn("RESET CACHEMANAGER - {}", ExceptionUtils.getRootCauseMessage(e));
		}
	}
	
	
	public void clearUrlCache(String cacheName) {
		logger.trace("CLEAR URL CACHE({})", cacheName);

		String mod = System.getProperty(Constants.MOD_KEY);
		if (StringUtils.isNotBlank(mod)) {
			mod = mod.toUpperCase();
		}
		String env = System.getProperty(Constants.ENV_KEY);
		if (StringUtils.isNotBlank(env)) {
			env = env.toUpperCase();
		}

		List<ConfigSystemView> cfgSysList = ((ConfigSystemService) BeanFactory.getInstance().findBean(ConfigSystemService.class)).findBySyscodeAndLikeConfigurationParameterFromCache("ENDPOINT_URL", mod + "_" + env);
		if (CollectionUtils.isNotEmpty(cfgSysList)) {
			for (ConfigSystemView cfgSysView : cfgSysList) {
				accessCacheBySysConfigValue(cfgSysView.getCfgValue(), cacheName);
			}
		}
	}
	
	private void accessCacheBySysConfigValue(String endpoint, String cacheName) {
		if (StringUtils.isNotBlank(endpoint)) {
			String urlString = endpoint + "/" + CACHE_CONTEXT_PATH + cacheName;
			try {
				URL url = new URL(urlString);
				URLConnection conn = url.openConnection();
				try(InputStream inputStream = conn.getInputStream()){inputStream.read();}  // read a byte just to ensure the stream works, sonarqube doesnt allow empty lines
			} catch (MalformedURLException e) {
				logger.warn("CLEAR URL CACHE - Malformed URL Exception {}", ExceptionUtils.getRootCauseMessage(e));
			} catch (IOException e) {
				logger.warn("CLEAR URL CACHE - IO Exception {}", ExceptionUtils.getRootCauseMessage(e));
			} 
		}
	}
}
