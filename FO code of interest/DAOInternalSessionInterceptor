package sg.ica.eac.common.interceptor;

import java.io.Serializable;
import java.time.LocalDateTime;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.EmptyInterceptor;
import org.hibernate.type.Type;

import sg.ica.eac.common.entity.AbstractEntity;
import sg.ica.eac.common.entity.embeddable.EmbeddableAuditFields;
import sg.ica.eac.common.entity.embeddable.IAuditFields;
import sg.ica.eac.common.resource.HibernateConstants;
import sg.ica.eac.common.resource.InterfaceConstants;


public class DAOInternalSessionInterceptor extends EmptyInterceptor {
	private static final long serialVersionUID = -1551867650902014272L;

	@Override
	public boolean onSave(Object entity, Serializable id, Object[] state, String[] propertyNames, Type[] types) {
		if (entity instanceof AbstractEntity) {
			AbstractEntity abstractEntity = (AbstractEntity) entity;
			EmbeddableAuditFields embeddableAuditFields = abstractEntity.getAuditFields();
			if (embeddableAuditFields == null) {
				embeddableAuditFields = new EmbeddableAuditFields();
				abstractEntity.setAuditFields(embeddableAuditFields);
			}
			
			updateEmbeddableAuditFields(InternalSessionInterceptor.SESSION_OVERRIDE.get(), embeddableAuditFields);
		}
		return false;
	}
	
	private void updateEmbeddableAuditFields(Boolean b, EmbeddableAuditFields embeddableAuditFields) {
		if (b == null || b || StringUtils.isBlank(embeddableAuditFields.getCreBy())) {
			String userId = this.getUserid();
			if (StringUtils.isBlank(userId)) {
				userId = InterfaceConstants.INTERFACE_DEFAULT_SYSTEM;
			}
			embeddableAuditFields.setCreBy(userId);
		}

		if (b == null || b || embeddableAuditFields.getCreOn() == null) {
			embeddableAuditFields.setCreOn(LocalDateTime.now());
		}

		if (b == null || b || StringUtils.isBlank(embeddableAuditFields.getUpdBy())) {
			embeddableAuditFields.setUpdBy(embeddableAuditFields.getCreBy());
		}

		if (b == null || b || embeddableAuditFields.getUpdOn() == null) {
			embeddableAuditFields.setUpdOn(embeddableAuditFields.getCreOn());
		}
	}

	@Override
	public boolean onFlushDirty(Object entity, Serializable id, Object[] currentState, Object[] previousState, String[] propertyNames, Type[] types) {
		if (entity instanceof AbstractEntity) {
			AbstractEntity abstractEntity = (AbstractEntity) entity;
			EmbeddableAuditFields embeddableAuditFields = abstractEntity.getAuditFields();
			if (embeddableAuditFields == null) {
				embeddableAuditFields = new EmbeddableAuditFields();
				abstractEntity.setAuditFields(embeddableAuditFields);
			}
			this.tryPopulateUpdFields(embeddableAuditFields);
		} else if (entity instanceof IAuditFields) {
			IAuditFields abstractEntity = (IAuditFields) entity;
			this.tryPopulateUpdFields(abstractEntity);
		}

		return false;
	}

	private void tryPopulateUpdFields(IAuditFields embeddableAuditFields) {
		Boolean b = InternalSessionInterceptor.SESSION_OVERRIDE.get();
		if (b == null || b || StringUtils.isBlank(embeddableAuditFields.getUpdBy())) {
			embeddableAuditFields.setUpdBy(this.getUserid());
		}

		if (b == null || b || embeddableAuditFields.getUpdOn() == null) {
			embeddableAuditFields.setUpdOn(LocalDateTime.now());
		}
	}

	protected String getUserid() {
		return HibernateConstants.DEFAULT_SYSTEM_ID;
	}

}
